//
// This file contains useful mixins
//

// @include vendor((transition: all .1s), ms o);
// or
// @include vendor((
//  transform: translate(-50%, 50%),
//  transition: all .1s
// ), ms o);
@mixin vendor($map, $vendors: webkit moz ms o) {
    @each $prop, $value in $map {
        @if $vendors {
          @each $vendor in $vendors {
            #{"-" + $vendor + "-" + $prop}: #{$value};
          }
        }
        // Dump regular property anyway
        #{$prop}: #{$value};
    }
}

@mixin display-flex() {
    display: -webkit-flex;
    display: -moz-flex;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
}

@mixin flex-grow($v) {
    -webkit-box-flex: $v;
    -webkit-flex-grow: $v;
    -ms-flex-positive: $v;
    flex-grow: $v;
}

@mixin flex-direction($dir) {
    $altDir: horizontal;

    @if $dir == column {
        $altDir: vertical;
    }

    -webkit-box-orient: $altDir;
    -webkit-box-direction: normal;
    -webkit-flex-direction: $dir;
    -ms-flex-direction: $dir;
    flex-direction: $dir;
}

@mixin flex-wrap($val) {
    $altVal: single;

    @if $val == wrap {
        $altVal: multiple;
    }

    -webkit-flex-wrap: $val;
    -webkit-box-lines: $altVal;
    -ms-flex-wrap: $val;
    flex-wrap: $val;
}

@mixin flex-justify-content($value) {
    $altValue: $value;

    @if $value == flex-start {
        $altValue: start;
    }

    @if $value == flex-end {
        $altValue: end;
    }

    @if $value == space-between {
        $altValue: justify;
    }

    -webkit-box-pack: $altValue;
    -webkit-justify-content: $value;
    -ms-flex-pack: $altValue;
    justify-content: $value;
}

@mixin flex-align-items($value) {
    $altValue: $value;

    @if $value == flex-start {
        $altValue: start;
    }

    @if $value == flex-end {
        $altValue: end;
    }

    @if $value == space-between {
        $altValue: justify;
    }

    -webkit-box-align: $altValue;
    -webkit-align-items: $value;
    -ms-flex-align: $altValue;
    align-items: $value;
}

// @include size(100%)
// or
// @include size(100%, 50%)
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

$mediaSizes: (
    "tiny":   480px,
    "small":  768px,
    "medium": 992px,
    "large":  1200px ,
);

$breakpoints: (
  "tiny":   (max-width: map-get($mediaSizes, "tiny")),
  "small":  (max-width: map-get($mediaSizes, "small")),
  "medium": (max-width: map-get($mediaSizes, "medium")),
  "large":  (max-width: map-get($mediaSizes, "large")),
);

$breakpoints-height: (
  "tiny":   (max-height: map-get($mediaSizes, "tiny")),
  "small":  (max-height: map-get($mediaSizes, "small")),
  "medium": (max-height: map-get($mediaSizes, "medium")),
  "large":  (max-height: map-get($mediaSizes, "large")),
);

// .element {
//      color: red;
//
//      @include breakpoint(medium) {
//          color: blue;
//      }
// }
@mixin breakpoint($name) {
    @if map-has-key($breakpoints, $name) {
        @media #{inspect(map-get($breakpoints, $name))} {
            @content;
        }
    }
    @else {
        @warn "Couldn't find a breakpoint named `#{$name}`.";
    }
}

@mixin breakpoint-height($name) {
    @if map-has-key($breakpoints-height, $name) {
        @media #{inspect(map-get($breakpoints-height, $name))} {
            @content;
        }
    }
    @else {
        @warn "Couldn't find a breakpoint named `#{$name}`.";
    }
}
